<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts | Research Notes</title><link>https://k4rtik.github.io/q/post/</link><atom:link href="https://k4rtik.github.io/q/post/index.xml" rel="self" type="application/rss+xml"/><description>Posts</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Tue, 11 Jan 2022 16:08:01 -0600</lastBuildDate><image><url>https://k4rtik.github.io/q/media/icon_hu95bcf4001b8c3a9b9433f24a55ec28ef_13239_512x512_fill_lanczos_center_3.png</url><title>Posts</title><link>https://k4rtik.github.io/q/post/</link></image><item><title>MacOS Setup</title><link>https://k4rtik.github.io/q/post/macos-setup/</link><pubDate>Tue, 11 Jan 2022 16:08:01 -0600</pubDate><guid>https://k4rtik.github.io/q/post/macos-setup/</guid><description>&lt;p>I have recently moved between a few macOS machines and have had to repeat some common development configuration. I think it&amp;rsquo;s best to document it here for both my future self and for others. Most of these are easy to install using &lt;a href="https://brew.sh/" target="_blank" rel="noopener">brew&lt;/a>.&lt;/p>
&lt;h2 id="editors">Editors&lt;/h2>
&lt;ul>
&lt;li>&lt;code>emacs&lt;/code>: &lt;code>brew tap &amp;quot;d12frosted/emacs-plus&amp;quot; &amp;amp;&amp;amp; brew install emacs-plus&lt;/code>&lt;/li>
&lt;li>&lt;code>visual-studio-code&lt;/code>: all config is auto-synced using GitHub.&lt;/li>
&lt;li>&lt;code>vim&lt;/code>: I just use &lt;a href="https://github.com/tpope/vim-sensible" target="_blank" rel="noopener">Tim Pope&amp;rsquo;s sensible&lt;/a> as I don&amp;rsquo;t spend as much time on vim anymore&lt;/li>
&lt;/ul>
&lt;h2 id="fonts">Fonts&lt;/h2>
&lt;p>After &lt;code>brew tap &amp;quot;homebrew/cask-fonts&amp;quot;&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>font-mononoki&lt;/code> for Agda&lt;/li>
&lt;li>&lt;code>font-fira-code&lt;/code> for everything else&lt;/li>
&lt;/ul>
&lt;h2 id="packages">Packages&lt;/h2>
&lt;p>See &lt;a href="https://github.com/k4rtik/shallow-backup/tree/master/packages" target="_blank" rel="noopener">https://github.com/k4rtik/shallow-backup/tree/master/packages&lt;/a> (private link) for complete list. Here are some essentials:&lt;/p>
&lt;ul>
&lt;li>&lt;code>brave-browser&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/buo/homebrew-cask-upgrade" target="_blank" rel="noopener">&lt;code>brew cu&lt;/code>&lt;/a>: &lt;code>brew tap buo/cask-upgrade &amp;amp;&amp;amp; brew cu pin brave-browser&lt;/code>&lt;/li>
&lt;li>&lt;code>gh&lt;/code>&lt;/li>
&lt;li>&lt;code>git&lt;/code>&lt;/li>
&lt;li>&lt;code>hiddenbar&lt;/code>&lt;/li>
&lt;li>&lt;code>htop&lt;/code>&lt;/li>
&lt;li>&lt;code>hugo&lt;/code>&lt;/li>
&lt;li>&lt;code>iterm2&lt;/code>&lt;/li>
&lt;li>&lt;code>mailtrackerblocker&lt;/code>&lt;/li>
&lt;li>&lt;code>rectangle&lt;/code>&lt;/li>
&lt;li>&lt;code>rescuetime&lt;/code>&lt;/li>
&lt;li>&lt;code>ticktick&lt;/code>&lt;/li>
&lt;li>&lt;code>tree&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/yt-dlp/yt-dlp" target="_blank" rel="noopener">yt-dlp&lt;/a>: &lt;code>brew install yt-dlp/taps/yt-dlp&lt;/code>&lt;/li>
&lt;li>&lt;code>zoom&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="languages">Languages&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.haskell.org/ghcup/" target="_blank" rel="noopener">Haskell&lt;/a>&lt;/li>
&lt;li>Agda (&lt;code>brew install llvm@12&lt;/code>, add it to the PATH, and then &lt;code>cabal install Agda&lt;/code>)&lt;/li>
&lt;li>&lt;a href="https://tug.org/texlive/acquire-netinstall.html" target="_blank" rel="noopener">LaTeX&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://opam.ocaml.org/doc/Install.html" target="_blank" rel="noopener">OCaml&lt;/a> and Coq (&lt;code>opam install coq&lt;/code>)&lt;/li>
&lt;li>Python3: &lt;code>brew install python&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://rustup.rs/" target="_blank" rel="noopener">Rust&lt;/a>
&lt;ul>
&lt;li>&lt;code>tealdeer&lt;/code>&lt;/li>
&lt;li>&lt;code>cargo-update&lt;/code>&lt;/li>
&lt;li>&lt;code>du-dust&lt;/code>&lt;/li>
&lt;li>&lt;code>ripgrep&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="maintenance">Maintenance&lt;/h1>
&lt;p>I often issue the following command to keep most of the packages updated:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">brewup &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> rustup update &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> cargo install-update -a &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> brew cu -a -y &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> tlmgr update --self --all &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ghcup list -c available
&lt;/code>&lt;/pre>&lt;/div>&lt;p>where &lt;code>brewup&lt;/code> is aliased to &lt;code>brew update; brew upgrade; brew cleanup; brew doctor&lt;/code>&lt;/p>
&lt;p>I tend to not auto-update opam packages as they can often break projects but I do maintain a &lt;code>default&lt;/code> switch with the latest OCaml version and several &lt;a href="https://github.com/coq/platform/" target="_blank" rel="noopener">coq-platform&lt;/a> releases, e.g.:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">❯ opam switch
&lt;span style="color:#75715e"># switch compiler description&lt;/span>
→ __coq-platform.2021.11.0~8.14~2021.11 ocaml-base-compiler.4.10.2 __coq-platform.2021.11.0~8.14~2021.11
default ocaml.4.12.1 default
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>How to write parsers fast</title><link>https://k4rtik.github.io/q/post/parsers/</link><pubDate>Wed, 15 Sep 2021 18:01:03 -0500</pubDate><guid>https://k4rtik.github.io/q/post/parsers/</guid><description>&lt;p>I had a fun time writing the openQASM parser over two years ago during my two week visit at UMD College Park. Since then, I have been quite fascinated with parsers. Today, I was trying to write a parser for Lambda Q#, but I wanted to figure out if I could reduce the work I need to do and avoid boilerplate.&lt;/p>
&lt;p>I found a few projects that seem helpful:&lt;/p>
&lt;ul>
&lt;li>Steffen Smolka&amp;rsquo;s &lt;a href="https://github.com/smolkaj/nice-parser" target="_blank" rel="noopener">Nice Parser&lt;/a> that is meant exactly for this need.&lt;/li>
&lt;li>Lélio Brun&amp;rsquo;s &lt;a href="https://github.com/Lelio-Brun/Obelisk" target="_blank" rel="noopener">Obelisk&lt;/a>, which I may end up using to generate good documentation for the grammar.&lt;/li>
&lt;/ul>
&lt;p>Further, since LambdaQs is based on the Modernized Algol (MA) language of Bob Harper, I somehow also stumbled upon a bunch of projects by Jon Sterling, specifically:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/jonsterling/sml-modernized-algol" target="_blank" rel="noopener">sml-modernized-algol&lt;/a>, which seems like an ABT representation of PFPL. Someone also ended up contributing &lt;a href="https://github.com/jonsterling/sml-modernized-algol/pull/4" target="_blank" rel="noopener">a parser for the surface syntax later&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/RedPRL/sml-typed-abts" target="_blank" rel="noopener">sml-typed-abts&lt;/a>, an implementation of Abstract Binding Trees (ABTs). Jon seems to have &lt;a href="https://github.com/jonsterling/ocaml-abt" target="_blank" rel="noopener">an OCaml port&lt;/a> too, but it seems unmaintained with a single commit.&lt;/li>
&lt;/ul>
&lt;p>The latter two projects will be helpful for me to translate Q# source syntax directly into PFPL-style ABTs.&lt;/p>
&lt;hr>
&lt;p>Turns out what I am really looking for is &lt;a href="http://bnfc.digitalgrammars.com/" target="_blank" rel="noopener">BNF Converter&lt;/a>.&lt;/p></description></item><item><title>Types and Effects</title><link>https://k4rtik.github.io/q/post/types-and-effects/</link><pubDate>Fri, 20 Aug 2021 15:43:17 -0500</pubDate><guid>https://k4rtik.github.io/q/post/types-and-effects/</guid><description>&lt;h2 id="type-and-effect-systems">Type and Effect Systems&lt;/h2>
&lt;p>How can we reason about the effects of a program without using monads or uniqueness types?&lt;/p>
&lt;p>An effect describes how an expression computes. Denoted by $\varphi$ annotation in the statics of the language.&lt;/p>
&lt;h2 id="region-based-memory-management">Region-Based Memory Management&lt;/h2>
&lt;p>A region-inference judgment such as&lt;/p>
&lt;blockquote>
&lt;p>$TE \vdash e ⇒ e' :(τ, ρ), \varphi$&lt;/p>
&lt;/blockquote>
&lt;p>where $TE$ is a type environment mapping variables with pairs $(\tau, \rho)$ of types and region variables (or &lt;em>place&lt;/em>) and $\varphi$ is an effect (a finite set of region variables). It is read as:&lt;/p>
&lt;blockquote>
&lt;p>in the type environment $TE$, the source expression $e$ is translated into a region-annotated expression $e'$, which has type $τ$, is placed in region $ρ$, and has effect $\varphi$.&lt;/p>
&lt;/blockquote>
&lt;p>$\varphi$ contains the superset of regions needed to evaluate $e$.&lt;/p>
&lt;p>One of my misconceptions associated with regions was that they involve allocations only on the heap. But turns out the most common case is to have regions which only ever contain one value, called &lt;em>finite regions&lt;/em>. A common optimization then is to allocate those on the stack.&lt;/p>
&lt;h2 id="partial-history">(Partial) History&lt;/h2>
&lt;figure id="figure-partial-history-circa-2007-credits-françois-pottierhttppauillacinriafrfpottierslidesfpottier-2007-05-linear-bestiarypdfpage5">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >
&lt;img alt="Partial history circa 2007. Credits: [François Pottier](http://pauillac.inria.fr/~fpottier/slides/fpottier-2007-05-linear-bestiary.pdf#page=5)" srcset="
/q/post/types-and-effects/pottier-history_hu84c7938e1d93a8a4fae9ea4d58e66e16_490733_9d31d867fd8b1cfca537ff3198d60e08.png 400w,
/q/post/types-and-effects/pottier-history_hu84c7938e1d93a8a4fae9ea4d58e66e16_490733_c18d66305db6738505f9d384d4c6bac6.png 760w,
/q/post/types-and-effects/pottier-history_hu84c7938e1d93a8a4fae9ea4d58e66e16_490733_1200x1200_fit_lanczos_3.png 1200w"
src="https://k4rtik.github.io/q/q/post/types-and-effects/pottier-history_hu84c7938e1d93a8a4fae9ea4d58e66e16_490733_9d31d867fd8b1cfca537ff3198d60e08.png"
width="760"
height="571"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
Partial history circa 2007. Credits: &lt;a href="http://pauillac.inria.fr/~fpottier/slides/fpottier-2007-05-linear-bestiary.pdf#page=5">François Pottier&lt;/a>
&lt;/figcaption>&lt;/figure>
&lt;h2 id="references">References&lt;/h2>
&lt;details class="spoiler " id="spoiler-1">
&lt;summary>References&lt;/summary>
&lt;p>&lt;ul>
&lt;li>Mads Tofte, Jean-Pierre Talpin. 1997. Region-Based Memory Management.&lt;/li>
&lt;li>Dan Grossman, Greg Morrisett, Trevor Jim, Michael Hicks, Yanling Wang, and James Cheney. 2002. Region-based memory management in cyclone. PLDI &amp;lsquo;02. &lt;a href="http://www.cs.umd.edu/projects/cyclone/papers/cyclone-regions-tr.pdf">http://www.cs.umd.edu/projects/cyclone/papers/cyclone-regions-tr.pdf&lt;/a>&lt;/li>
&lt;li>Philip Wadler and Peter Thiemann. 2003. The marriage of effects and monads. ACM Transactions on Computational Logic. &lt;a href="https://homepages.inf.ed.ac.uk/wadler/papers/effectstocl/effectstocl.pdf">https://homepages.inf.ed.ac.uk/wadler/papers/effectstocl/effectstocl.pdf&lt;/a>&lt;/li>
&lt;li>Tofte, M., Birkedal, L., Elsman, M. et al. A Retrospective on Region-Based Memory Management. Higher-Order and Symbolic Computation 17, 245&amp;ndash;265 (2004).&lt;/li>
&lt;li>Fritz Henglein, Henning Makholm, and Henning Niss. 2005. Effect Types and Region-Based Memory Management. Ch-3 of Advanced Topics in Types and Programming Languages.&lt;/li>
&lt;li>Nikhil Swamy, Michael Hicks, Greg Morrisett, Dan Grossman, and Trevor Jim. 2006. Safe Manual Memory Management in Cyclone. Science of Computer Programming. Special issue on memory management. &lt;a href="http://www.cs.umd.edu/projects/PL/cyclone/scp.pdf">http://www.cs.umd.edu/projects/PL/cyclone/scp.pdf&lt;/a>&lt;/li>
&lt;li>François Pottier. 2007. Wandering through linear types, capabilities, and
regions. &lt;a href="http://pauillac.inria.fr/~fpottier/slides/fpottier-2007-05-linear-bestiary.pdf">http://pauillac.inria.fr/~fpottier/slides/fpottier-2007-05-linear-bestiary.pdf&lt;/a>&lt;/li>
&lt;li>Asumu Takikawa. 2012. Type and Effect Systems. &lt;a href="http://www.ccs.neu.edu/home/amal/course/7480-s12/effects-notes.pdf">http://www.ccs.neu.edu/home/amal/course/7480-s12/effects-notes.pdf&lt;/a>&lt;/li>
&lt;li>El Pin Al. 2019. Incomplete Bibliography of Region-based Memory Management. &lt;a href="https://github.com/elpinal/regions#incomplete-bibliography-of-region-based-memory-management">https://github.com/elpinal/regions#incomplete-bibliography-of-region-based-memory-management&lt;/a>&lt;/li>
&lt;/ul>
&lt;/p>
&lt;/details></description></item></channel></rss>