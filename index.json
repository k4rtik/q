[{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"","tags":null,"title":"Kartik","type":"authors"},{"authors":[],"categories":[],"content":"I have recently moved between a few macOS machines and have had to repeat some common development configuration. I think it\u0026rsquo;s best to document it here for both my future self and for others. Most of these are easy to install using brew.\nEditors  emacs: brew tap \u0026quot;d12frosted/emacs-plus\u0026quot; \u0026amp;\u0026amp; brew install emacs-plus visual-studio-code: all config is auto-synced using GitHub. vim: I just use Tim Pope\u0026rsquo;s sensible as I don\u0026rsquo;t spend as much time on vim anymore  Fonts After brew tap \u0026quot;homebrew/cask-fonts\u0026quot;\n font-mononoki for Agda font-fira-code for everything else  Packages See https://github.com/k4rtik/shallow-backup/tree/master/packages (private link) for complete list. Here are some essentials:\n brave-browser brew cu: brew tap buo/cask-upgrade \u0026amp;\u0026amp; brew cu pin brave-browser gh git hiddenbar htop hugo iterm2 mailtrackerblocker rectangle rescuetime ticktick tree yt-dlp: brew install yt-dlp/taps/yt-dlp zoom  Languages  Haskell Agda (brew install llvm@12, add it to the PATH, and then cabal install Agda) LaTeX OCaml and Coq (opam install coq) Python3: brew install python Rust  tealdeer cargo-update du-dust ripgrep    Maintenance I often issue the following command to keep most of the packages updated:\nbrewup \u0026amp;\u0026amp; rustup update \u0026amp;\u0026amp; cargo install-update -a \u0026amp;\u0026amp; brew cu -a -y \u0026amp;\u0026amp; tlmgr update --self --all \u0026amp;\u0026amp; ghcup list -c available where brewup is aliased to brew update; brew upgrade; brew cleanup; brew doctor\nI tend to not auto-update opam packages as they can often break projects but I do maintain a default switch with the latest OCaml version and several coq-platform releases, e.g.:\n❯ opam switch # switch compiler description → __coq-platform.2021.11.0~8.14~2021.11 ocaml-base-compiler.4.10.2 __coq-platform.2021.11.0~8.14~2021.11 default ocaml.4.12.1 default ","date":1641938881,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1642029913,"objectID":"2ca643715c2393128d4465e892f1d244","permalink":"https://k4rtik.github.io/q/post/macos-setup/","publishdate":"2022-01-11T16:08:01-06:00","relpermalink":"/q/post/macos-setup/","section":"post","summary":"I have recently moved between a few macOS machines and have had to repeat some common development configuration. I think it\u0026rsquo;s best to document it here for both my future self and for others.","tags":[],"title":"MacOS Setup","type":"post"},{"authors":[],"categories":[],"content":"I had a fun time writing the openQASM parser over two years ago during my two week visit at UMD College Park. Since then, I have been quite fascinated with parsers. Today, I was trying to write a parser for Lambda Q#, but I wanted to figure out if I could reduce the work I need to do and avoid boilerplate.\nI found a few projects that seem helpful:\n Steffen Smolka\u0026rsquo;s Nice Parser that is meant exactly for this need. Lélio Brun\u0026rsquo;s Obelisk, which I may end up using to generate good documentation for the grammar.  Further, since LambdaQs is based on the Modernized Algol (MA) language of Bob Harper, I somehow also stumbled upon a bunch of projects by Jon Sterling, specifically:\n sml-modernized-algol, which seems like an ABT representation of PFPL. Someone also ended up contributing a parser for the surface syntax later. sml-typed-abts, an implementation of Abstract Binding Trees (ABTs). Jon seems to have an OCaml port too, but it seems unmaintained with a single commit.  The latter two projects will be helpful for me to translate Q# source syntax directly into PFPL-style ABTs.\n Turns out what I am really looking for is BNF Converter.\n","date":1631746863,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1631825542,"objectID":"3f0c4c7add9ef83732b1dd1c0dff50aa","permalink":"https://k4rtik.github.io/q/post/parsers/","publishdate":"2021-09-15T18:01:03-05:00","relpermalink":"/q/post/parsers/","section":"post","summary":"I had a fun time writing the openQASM parser over two years ago during my two week visit at UMD College Park. Since then, I have been quite fascinated with parsers.","tags":[],"title":"How to write parsers fast","type":"post"},{"authors":[],"categories":[],"content":"Type and Effect Systems How can we reason about the effects of a program without using monads or uniqueness types?\nAn effect describes how an expression computes. Denoted by $\\varphi$ annotation in the statics of the language.\nRegion-Based Memory Management A region-inference judgment such as\n $TE \\vdash e ⇒ e' :(τ, ρ), \\varphi$\n where $TE$ is a type environment mapping variables with pairs $(\\tau, \\rho)$ of types and region variables (or place) and $\\varphi$ is an effect (a finite set of region variables). It is read as:\n in the type environment $TE$, the source expression $e$ is translated into a region-annotated expression $e'$, which has type $τ$, is placed in region $ρ$, and has effect $\\varphi$.\n $\\varphi$ contains the superset of regions needed to evaluate $e$.\nOne of my misconceptions associated with regions was that they involve allocations only on the heap. But turns out the most common case is to have regions which only ever contain one value, called finite regions. A common optimization then is to allocate those on the stack.\n(Partial) History   Partial history circa 2007. Credits: François Pottier  References References  Mads Tofte, Jean-Pierre Talpin. 1997. Region-Based Memory Management. Dan Grossman, Greg Morrisett, Trevor Jim, Michael Hicks, Yanling Wang, and James Cheney. 2002. Region-based memory management in cyclone. PLDI \u0026lsquo;02. http://www.cs.umd.edu/projects/cyclone/papers/cyclone-regions-tr.pdf Philip Wadler and Peter Thiemann. 2003. The marriage of effects and monads. ACM Transactions on Computational Logic. https://homepages.inf.ed.ac.uk/wadler/papers/effectstocl/effectstocl.pdf Tofte, M., Birkedal, L., Elsman, M. et al. A Retrospective on Region-Based Memory Management. Higher-Order and Symbolic Computation 17, 245\u0026ndash;265 (2004). Fritz Henglein, Henning Makholm, and Henning Niss. 2005. Effect Types and Region-Based Memory Management. Ch-3 of Advanced Topics in Types and Programming Languages. Nikhil Swamy, Michael Hicks, Greg Morrisett, Dan Grossman, and Trevor Jim. 2006. Safe Manual Memory Management in Cyclone. Science of Computer Programming. Special issue on memory management. http://www.cs.umd.edu/projects/PL/cyclone/scp.pdf François Pottier. 2007. Wandering through linear types, capabilities, and regions. http://pauillac.inria.fr/~fpottier/slides/fpottier-2007-05-linear-bestiary.pdf Asumu Takikawa. 2012. Type and Effect Systems. http://www.ccs.neu.edu/home/amal/course/7480-s12/effects-notes.pdf El Pin Al. 2019. Incomplete Bibliography of Region-based Memory Management. https://github.com/elpinal/regions#incomplete-bibliography-of-region-based-memory-management   ","date":1629492197,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1629813971,"objectID":"50e56892591ab6b22cc42b4721a84f2e","permalink":"https://k4rtik.github.io/q/post/types-and-effects/","publishdate":"2021-08-20T15:43:17-05:00","relpermalink":"/q/post/types-and-effects/","section":"post","summary":"Type and Effect Systems How can we reason about the effects of a program without using monads or uniqueness types?\nAn effect describes how an expression computes. Denoted by $\\varphi$ annotation in the statics of the language.","tags":[],"title":"Types and Effects","type":"post"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://k4rtik.github.io/q/about/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/q/about/","section":"","summary":"","tags":null,"title":"","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://k4rtik.github.io/q/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/q/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]